(function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler, options) {
		node.addEventListener(event, handler, options);
	}

	function removeListener(node, event, handler, options) {
		node.removeEventListener(event, handler, options);
	}

	function setAttribute(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);
		else node.setAttribute(attribute, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var proto = {
		destroy,
		get,
		fire,
		on,
		set,
		_recompute: noop,
		_set,
		_stage,
		_mount,
		_differs
	};

	/* SidebarNavigationMenu.html generated by Svelte v2.16.0 */

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-rdbxge-style';
		style.textContent = ".container.svelte-rdbxge{position:absolute;top:0;right:0;bottom:0;left:0}#titlebar.svelte-rdbxge{display:flex}#sidebar-opener.svelte-rdbxge{flex-basis:50px}#title.svelte-rdbxge{flex:2}button.svelte-rdbxge{border:none;padding:0;margin:0;background-color:transparent}@media all and (max-width: 800px){#sidebar-menu[aria-expanded=false].svelte-rdbxge{display:none}#sidebar-menu[aria-expanded=true].svelte-rdbxge{position:absolute;top:0;left:0;bottom:0;right:0;display:flex}#sidebar-menu-content-area.svelte-rdbxge{flex:2}#sidebar-close-control.svelte-rdbxge{flex-basis:50px}}@media all and (min-width: 600px){#sidebar-close-control.svelte-rdbxge{flex-basis:200px}}@media all and (min-width: 800px){.container.svelte-rdbxge{display:flex}#sidebar-menu-content-area.svelte-rdbxge{flex-basis:200px}#sidebar-close-control.svelte-rdbxge,#sidebar-opener.svelte-rdbxge{display:none}#content.svelte-rdbxge{flex:2}}.container.svelte-rdbxge{background-color:#637de4}#sidebar-menu-content-area.svelte-rdbxge{background-color:#4cb041}#sidebar-menu.svelte-rdbxge{background-color:#ebe76f}#sidebar-close-control.svelte-rdbxge{background-color:#eb5c5c80}#titlebar.svelte-rdbxge{background-color:red}";
		append(document.head, style);
	}

	function create_main_fragment(component, ctx) {
		var div9, div2, div1, text1, button0, button0_aria_expanded_value, div2_aria_expanded_value, text2, div8, div5, button1, span, button1_aria_expanded_value, text4, div4, text6, div7;

		function click_handler(event) {
			component.set({ sidebarIsOpen: !ctx.sidebarIsOpen });
		}

		function keypress_handler(event) {
			component.set({ sidebarIsOpen: !ctx.sidebarIsOpen });
		}

		function click_handler_1(event) {
			component.set({ sidebarIsOpen: !ctx.sidebarIsOpen });
		}

		function keypress_handler_1(event) {
			component.set({ sidebarIsOpen: !ctx.sidebarIsOpen });
		}

		return {
			c() {
				div9 = createElement("div");
				div2 = createElement("div");
				div1 = createElement("div");
				div1.innerHTML = `<div class="slot slot-sidebar">
							this sidebar can be whatever
						</div>`;
				text1 = createText("\n\t\t");
				button0 = createElement("button");
				text2 = createText("\n\t");
				div8 = createElement("div");
				div5 = createElement("div");
				button1 = createElement("button");
				span = createElement("span");
				span.textContent = "â˜°";
				text4 = createText("\n\t\t\t");
				div4 = createElement("div");
				div4.innerHTML = `<div class="slot slot-titlebar">
								this part is always visible
							</div>`;
				text6 = createText("\n\t\t");
				div7 = createElement("div");
				div7.innerHTML = `<div class="slot slot-main-content">
							this is where the main content goes
						</div>`;
				div1.id = "sidebar-menu-content-area";
				div1.className = "svelte-rdbxge";
				addListener(button0, "click", click_handler);
				addListener(button0, "keypress", keypress_handler);
				button0.type = "button";
				button0.id = "sidebar-close-control";
				setAttribute(button0, "aria-controls", "sidebar-menu");
				setAttribute(button0, "aria-label", "toggle sidebar menu");
				setAttribute(button0, "aria-expanded", button0_aria_expanded_value = ctx.sidebarIsOpen ? 'true' : 'false');
				button0.className = "svelte-rdbxge";
				div2.id = "sidebar-menu";
				setAttribute(div2, "aria-expanded", div2_aria_expanded_value = ctx.sidebarIsOpen ? 'true' : 'false');
				div2.className = "svelte-rdbxge";
				span.className = "slot slot-opener-button";
				addListener(button1, "click", click_handler_1);
				addListener(button1, "keypress", keypress_handler_1);
				button1.id = "sidebar-opener";
				setAttribute(button1, "aria-controls", "sidebar-menu");
				setAttribute(button1, "aria-label", "toggle sidebar menu");
				setAttribute(button1, "aria-expanded", button1_aria_expanded_value = ctx.sidebarIsOpen ? 'true' : 'false');
				button1.className = "svelte-rdbxge";
				div4.id = "title";
				div4.className = "svelte-rdbxge";
				div5.id = "titlebar";
				div5.className = "svelte-rdbxge";
				div7.id = "main";
				div8.id = "content";
				div8.className = "svelte-rdbxge";
				div9.className = "container svelte-rdbxge";
			},

			m(target, anchor) {
				insert(target, div9, anchor);
				append(div9, div2);
				append(div2, div1);
				append(div2, text1);
				append(div2, button0);
				append(div9, text2);
				append(div9, div8);
				append(div8, div5);
				append(div5, button1);
				append(button1, span);
				append(div5, text4);
				append(div5, div4);
				append(div8, text6);
				append(div8, div7);
			},

			p(changed, _ctx) {
				ctx = _ctx;
				if ((changed.sidebarIsOpen) && button0_aria_expanded_value !== (button0_aria_expanded_value = ctx.sidebarIsOpen ? 'true' : 'false')) {
					setAttribute(button0, "aria-expanded", button0_aria_expanded_value);
				}

				if ((changed.sidebarIsOpen) && div2_aria_expanded_value !== (div2_aria_expanded_value = ctx.sidebarIsOpen ? 'true' : 'false')) {
					setAttribute(div2, "aria-expanded", div2_aria_expanded_value);
				}

				if ((changed.sidebarIsOpen) && button1_aria_expanded_value !== (button1_aria_expanded_value = ctx.sidebarIsOpen ? 'true' : 'false')) {
					setAttribute(button1, "aria-expanded", button1_aria_expanded_value);
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div9);
				}

				removeListener(button0, "click", click_handler);
				removeListener(button0, "keypress", keypress_handler);
				removeListener(button1, "click", click_handler_1);
				removeListener(button1, "keypress", keypress_handler_1);
			}
		};
	}

	function SidebarNavigationMenu(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		if (!document.getElementById("svelte-rdbxge-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SidebarNavigationMenu.prototype, proto);

	const onReady = callback => {
		const state = document.readyState;
		if (state === 'complete' || state === 'interactive') {
			setTimeout(callback, 0);
		} else {
			document.addEventListener('DOMContentLoaded', () => {
				callback();
			});
		}
	};

	onReady(() => {
		const sidebar = new SidebarNavigationMenu({
			target: document.querySelector('body'),
			data: {
				sidebarIsOpen: true
			}
		});
	});

}());
